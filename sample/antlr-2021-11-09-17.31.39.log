2021-11-09 17:31:39:240 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT infoPart))) (? (BLOCK (ALT variableDeclarationPart))) block DOT))) (RULE infoPart (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE variableDeclarationPart (BLOCK (ALT 'var' variableDeclaration (* (BLOCK (ALT SEMI variableDeclaration))) SEMI))) (RULE variableDeclaration (BLOCK (ALT identifierList COLON varType))) (RULE identifierList (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (BLOCK (ALT 'integer') (ALT 'int64'))))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT whileStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN identifierList RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT EQUAL) (ALT NOT_EQUAL) (ALT LT) (ALT LE) (ALT GE) (ALT GT) (ALT OR) (ALT AND) (ALT DIV) (ALT MOD) (ALT PLUS) (ALT MINUS) (ALT STAR) (ALT SLASH))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE whileStatement (BLOCK (ALT 'while' expression 'do' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE GT (BLOCK (ALT '>'))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT1 (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip))) (RULE COMMENT2 (BLOCK (LEXER_ALT_ACTION (ALT '{' (* (BLOCK (ALT .))) '}') skip)))))
2021-11-09 17:31:39:256 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT infoPart))) (? (BLOCK (ALT variableDeclarationPart))) block DOT))) (RULE infoPart (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE variableDeclarationPart (BLOCK (ALT 'var' variableDeclaration (* (BLOCK (ALT SEMI variableDeclaration))) SEMI))) (RULE variableDeclaration (BLOCK (ALT identifierList COLON varType))) (RULE identifierList (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'int64')))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT whileStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN identifierList RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE whileStatement (BLOCK (ALT 'while' expression 'do' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE GT (BLOCK (ALT '>'))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT1 (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip))) (RULE COMMENT2 (BLOCK (LEXER_ALT_ACTION (ALT '{' (* (BLOCK (ALT .))) '}') skip)))))
2021-11-09 17:31:39:272 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT infoPart))) (? (BLOCK (ALT variableDeclarationPart))) block DOT))) (RULE infoPart (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE variableDeclarationPart (BLOCK (ALT 'var' variableDeclaration (* (BLOCK (ALT SEMI variableDeclaration))) SEMI))) (RULE variableDeclaration (BLOCK (ALT identifierList COLON varType))) (RULE identifierList (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'int64')))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT whileStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN identifierList RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE whileStatement (BLOCK (ALT 'while' expression 'do' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement)))))
2021-11-09 17:31:39:272 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR PascalLexer (RULES (RULE T__0 (BLOCK (ALT 'program'))) (RULE T__1 (BLOCK (ALT 'var'))) (RULE T__2 (BLOCK (ALT 'integer'))) (RULE T__3 (BLOCK (ALT 'int64'))) (RULE T__4 (BLOCK (ALT 'begin'))) (RULE T__5 (BLOCK (ALT 'end'))) (RULE T__6 (BLOCK (ALT 'writeln'))) (RULE T__7 (BLOCK (ALT 'readln'))) (RULE T__8 (BLOCK (ALT 'if'))) (RULE T__9 (BLOCK (ALT 'then'))) (RULE T__10 (BLOCK (ALT 'else'))) (RULE T__11 (BLOCK (ALT 'while'))) (RULE T__12 (BLOCK (ALT 'do'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE GT (BLOCK (ALT '>'))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT1 (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip))) (RULE COMMENT2 (BLOCK (LEXER_ALT_ACTION (ALT '{' (* (BLOCK (ALT .))) '}') skip)))))
2021-11-09 17:31:39:457 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, SEMI=14, COLON=15, COMMA=16, DOT=17, LPAREN=18, RPAREN=19, ASSIGN=20, EQUAL=21, NOT_EQUAL=22, LT=23, LE=24, GE=25, GT=26, OR=27, AND=28, PLUS=29, MINUS=30, STAR=31, SLASH=32, DIV=33, MOD=34, ID=35, CONST_INT=36, CONST_STR=37, WS=38, COMMENT1=39, COMMENT2=40}
2021-11-09 17:31:39:457 semantics LogManager.java:25 strings={'program'=1, 'var'=2, 'integer'=3, 'int64'=4, 'begin'=5, 'end'=6, 'writeln'=7, 'readln'=8, 'if'=9, 'then'=10, 'else'=11, 'while'=12, 'do'=13, ';'=14, ':'=15, ','=16, '.'=17, '('=18, ')'=19, ':='=20, '='=21, '<>'=22, '<'=23, '<='=24, '>='=25, '>'=26, 'or'=27, 'and'=28, '+'=29, '-'=30, '*'=31, '/'=32, '//'=33, '%'=34}
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 0 in rule program
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[1, {2, 5}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? true
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 1 in rule program
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[2, 5]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? true
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 2 in rule infoPart
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 3 in rule variableDeclarationPart
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[14, 14]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 4 in rule identifierList
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[16, {15, 19}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? true
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 5 in rule block
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[14, 6]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? true
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 6 in rule statements
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[14, {6, 14}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 7 in rule statement
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[7, 8, 7, 5, 35, 9, 12]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 8 in rule expressions
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[16, 19]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? true
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 9 in rule expression
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[18, 36, 37, 35]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? true
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 10 in rule expression
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[{21..34}, {6, 10..11, 13..14, 16, 19, 21..34}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 11 in rule ifStatement
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[5, {5, 7..9, 12, 35}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 12 in rule ifStatement
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[11, {6, 11, 14}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 13 in rule elseStatement
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[5, {5, 7..9, 12, 35}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
2021-11-09 17:31:39:457 LL1 LogManager.java:25 
DECISION 14 in rule whileStatement
2021-11-09 17:31:39:457 LL1 LogManager.java:25 look=[5, {5, 7..9, 12, 35}]
2021-11-09 17:31:39:457 LL1 LogManager.java:25 LL(1)? false
