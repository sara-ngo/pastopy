2021-11-15 20:19:57:066 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varName (* (BLOCK (ALT SEMI varName))) SEMI))) (RULE varName (BLOCK (ALT varID COLON varType))) (RULE varID (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (BLOCK (ALT 'integer') (ALT 'real') (ALT 'string'))))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varID RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT DIV) (ALT MOD) (ALT PLUS) (ALT MINUS) (ALT MUL) (ALT SLASH))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT1 (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip))) (RULE COMMENT2 (BLOCK (LEXER_ALT_ACTION (ALT '{' (* (BLOCK (ALT .))) '}') skip)))))
2021-11-15 20:19:57:082 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varName (* (BLOCK (ALT SEMI varName))) SEMI))) (RULE varName (BLOCK (ALT varID COLON varType))) (RULE varID (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'real' 'string')))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varID RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET DIV MOD PLUS MINUS MUL SLASH)))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT1 (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip))) (RULE COMMENT2 (BLOCK (LEXER_ALT_ACTION (ALT '{' (* (BLOCK (ALT .))) '}') skip)))))
2021-11-15 20:19:57:100 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varName (* (BLOCK (ALT SEMI varName))) SEMI))) (RULE varName (BLOCK (ALT varID COLON varType))) (RULE varID (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'real' 'string')))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varID RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET DIV MOD PLUS MINUS MUL SLASH)))) (RULE blockBody (BLOCK (ALT statement)))))
2021-11-15 20:19:57:100 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR PascalLexer (RULES (RULE T__0 (BLOCK (ALT 'program'))) (RULE T__1 (BLOCK (ALT 'var'))) (RULE T__2 (BLOCK (ALT 'integer'))) (RULE T__3 (BLOCK (ALT 'real'))) (RULE T__4 (BLOCK (ALT 'string'))) (RULE T__5 (BLOCK (ALT 'begin'))) (RULE T__6 (BLOCK (ALT 'end'))) (RULE T__7 (BLOCK (ALT 'writeln'))) (RULE T__8 (BLOCK (ALT 'readln'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT1 (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip))) (RULE COMMENT2 (BLOCK (LEXER_ALT_ACTION (ALT '{' (* (BLOCK (ALT .))) '}') skip)))))
2021-11-15 20:19:57:293 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, SEMI=10, COLON=11, COMMA=12, DOT=13, LPAREN=14, RPAREN=15, ASSIGN=16, PLUS=17, MINUS=18, MUL=19, SLASH=20, DIV=21, MOD=22, ID=23, CONST_INT=24, CONST_STR=25, WS=26, COMMENT1=27, COMMENT2=28}
2021-11-15 20:19:57:293 semantics LogManager.java:25 strings={'program'=1, 'var'=2, 'integer'=3, 'real'=4, 'string'=5, 'begin'=6, 'end'=7, 'writeln'=8, 'readln'=9, ';'=10, ':'=11, ','=12, '.'=13, '('=14, ')'=15, ':='=16, '+'=17, '-'=18, '*'=19, '/'=20, '//'=21, '%'=22}
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 0 in rule program
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[1, {2, 6}]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? true
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 1 in rule program
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[2, 6]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? true
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 2 in rule programName
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? false
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 3 in rule varDeclaration
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[10, 10]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? false
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 4 in rule varID
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[12, {11, 15}]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? true
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 5 in rule block
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[10, 7]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? true
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 6 in rule statements
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[10, {7, 10}]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? false
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 7 in rule statement
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[8, 9, 8, 6, 23]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? false
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 8 in rule expressions
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[12, 15]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? true
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 9 in rule expression
2021-11-15 20:19:57:297 LL1 LogManager.java:25 look=[14, 24, 25, 23]
2021-11-15 20:19:57:297 LL1 LogManager.java:25 LL(1)? true
2021-11-15 20:19:57:297 LL1 LogManager.java:25 
DECISION 10 in rule expression
2021-11-15 20:19:57:301 LL1 LogManager.java:25 look=[{17..22}, {<EOF>, 7, 10, 12, 15, 17..22}]
2021-11-15 20:19:57:301 LL1 LogManager.java:25 LL(1)? false
