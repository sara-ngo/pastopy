2021-11-28 17:18:50:799 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT programName block DOT))) (RULE programName (BLOCK (ALT 'program' ID SEMI))) (RULE block (BLOCK (ALT (* (BLOCK (ALT varDeclaration) (ALT funcDeclaration))) compoundStatement))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE funcDeclaration (BLOCK (ALT funcDeclarationBlock SEMI))) (RULE funcDeclarationBlock (BLOCK (ALT 'function' ID (? (BLOCK (ALT argumentList))) COLON varType SEMI block))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (BLOCK (ALT 'char') (ALT 'integer') (ALT 'string') (ALT 'real') (ALT 'boolean'))))) (RULE argumentList (BLOCK (ALT LPAREN varName COLON varType RPAREN))) (RULE funcCall (BLOCK (ALT ID LPAREN (? (BLOCK (ALT parameter))) RPAREN))) (RULE parameter (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE compoundStatement (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT EPSILON) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT funcCall))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID) (ALT funcCall)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT EQUAL) (ALT NOT_EQUAL) (ALT LT) (ALT LE) (ALT GE) (ALT GT) (ALT OR) (ALT AND) (ALT DIV) (ALT MOD) (ALT PLUS) (ALT MINUS) (ALT STAR) (ALT SLASH))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-28 17:18:50:860 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT programName block DOT))) (RULE programName (BLOCK (ALT 'program' ID SEMI))) (RULE block (BLOCK (ALT (* (BLOCK (ALT varDeclaration) (ALT funcDeclaration))) compoundStatement))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE funcDeclaration (BLOCK (ALT funcDeclarationBlock SEMI))) (RULE funcDeclarationBlock (BLOCK (ALT 'function' ID (? (BLOCK (ALT argumentList))) COLON varType SEMI block))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'char' 'integer' 'string' 'real' 'boolean')))) (RULE argumentList (BLOCK (ALT LPAREN varName COLON varType RPAREN))) (RULE funcCall (BLOCK (ALT ID LPAREN (? (BLOCK (ALT parameter))) RPAREN))) (RULE parameter (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE compoundStatement (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT EPSILON) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT funcCall))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID) (ALT funcCall)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-28 17:18:50:934 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT programName block DOT))) (RULE programName (BLOCK (ALT 'program' ID SEMI))) (RULE block (BLOCK (ALT (* (BLOCK (ALT varDeclaration) (ALT funcDeclaration))) compoundStatement))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE funcDeclaration (BLOCK (ALT funcDeclarationBlock SEMI))) (RULE funcDeclarationBlock (BLOCK (ALT 'function' ID (? (BLOCK (ALT argumentList))) COLON varType SEMI block))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'char' 'integer' 'string' 'real' 'boolean')))) (RULE argumentList (BLOCK (ALT LPAREN varName COLON varType RPAREN))) (RULE funcCall (BLOCK (ALT ID LPAREN (? (BLOCK (ALT parameter))) RPAREN))) (RULE parameter (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE compoundStatement (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT EPSILON) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT funcCall))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID) (ALT funcCall)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement)))))
2021-11-28 17:18:50:935 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR PascalLexer (RULES (RULE T__0 (BLOCK (ALT 'program'))) (RULE T__1 (BLOCK (ALT 'var'))) (RULE T__2 (BLOCK (ALT 'function'))) (RULE T__3 (BLOCK (ALT 'char'))) (RULE T__4 (BLOCK (ALT 'integer'))) (RULE T__5 (BLOCK (ALT 'string'))) (RULE T__6 (BLOCK (ALT 'real'))) (RULE T__7 (BLOCK (ALT 'boolean'))) (RULE T__8 (BLOCK (ALT 'begin'))) (RULE T__9 (BLOCK (ALT 'end'))) (RULE T__10 (BLOCK (ALT 'writeln'))) (RULE T__11 (BLOCK (ALT 'if'))) (RULE T__12 (BLOCK (ALT 'then'))) (RULE T__13 (BLOCK (ALT 'else'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-28 17:18:51:318 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, SEMI=15, COLON=16, COMMA=17, DOT=18, LPAREN=19, RPAREN=20, ASSIGN=21, PLUS=22, MINUS=23, STAR=24, SLASH=25, DIV=26, MOD=27, EQUAL=28, NOT_EQUAL=29, LT=30, LE=31, GT=32, GE=33, OR=34, AND=35, ID=36, CONST_INT=37, CONST_STR=38, WS=39, COMMENT=40}
2021-11-28 17:18:51:318 semantics LogManager.java:25 strings={'program'=1, 'var'=2, 'function'=3, 'char'=4, 'integer'=5, 'string'=6, 'real'=7, 'boolean'=8, 'begin'=9, 'end'=10, 'writeln'=11, 'if'=12, 'then'=13, 'else'=14, ';'=15, ':'=16, ','=17, '.'=18, '('=19, ')'=20, ':='=21, '+'=22, '-'=23, '*'=24, '/'=25, '//'=26, '%'=27, '='=28, '<>'=29, '<'=30, '<='=31, '>'=32, '>='=33, 'or'=34, 'and'=35}
2021-11-28 17:18:51:327 LL1 LogManager.java:25 
DECISION 0 in rule block
2021-11-28 17:18:51:327 LL1 LogManager.java:25 look=[2, 3]
2021-11-28 17:18:51:327 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:327 LL1 LogManager.java:25 
DECISION 1 in rule block
2021-11-28 17:18:51:327 LL1 LogManager.java:25 look=[{2..3}, 9]
2021-11-28 17:18:51:327 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:327 LL1 LogManager.java:25 
DECISION 2 in rule varDeclaration
2021-11-28 17:18:51:327 LL1 LogManager.java:25 look=[15, 15]
2021-11-28 17:18:51:327 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:327 LL1 LogManager.java:25 
DECISION 3 in rule funcDeclarationBlock
2021-11-28 17:18:51:327 LL1 LogManager.java:25 look=[19, 16]
2021-11-28 17:18:51:327 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:327 LL1 LogManager.java:25 
DECISION 4 in rule varName
2021-11-28 17:18:51:327 LL1 LogManager.java:25 look=[17, 16]
2021-11-28 17:18:51:327 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:327 LL1 LogManager.java:25 
DECISION 5 in rule funcCall
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[{19, 36..38}, 20]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 6 in rule parameter
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[17, 20]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 7 in rule compoundStatement
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[15, 10]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 8 in rule statements
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[15, {10, 15}]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 9 in rule statement
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[{10, 14..15}, 11, {2..3, 9}, 36, 12, 36]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 10 in rule expressions
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[17, 20]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? true
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 11 in rule expression
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[19, 37, 38, 36, 36]
2021-11-28 17:18:51:328 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:328 LL1 LogManager.java:25 
DECISION 12 in rule expression
2021-11-28 17:18:51:328 LL1 LogManager.java:25 look=[{22..35}, {10, 13..15, 17, 20, 22..35}]
2021-11-28 17:18:51:329 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:329 LL1 LogManager.java:25 
DECISION 13 in rule ifStatement
2021-11-28 17:18:51:329 LL1 LogManager.java:25 look=[{2..3, 9}, {2..3, 9..12, 14..15, 36}]
2021-11-28 17:18:51:329 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:329 LL1 LogManager.java:25 
DECISION 14 in rule ifStatement
2021-11-28 17:18:51:329 LL1 LogManager.java:25 look=[14, {10, 14..15}]
2021-11-28 17:18:51:329 LL1 LogManager.java:25 LL(1)? false
2021-11-28 17:18:51:329 LL1 LogManager.java:25 
DECISION 15 in rule elseStatement
2021-11-28 17:18:51:330 LL1 LogManager.java:25 look=[{2..3, 9}, {2..3, 9..12, 14..15, 36}]
2021-11-28 17:18:51:330 LL1 LogManager.java:25 LL(1)? false
