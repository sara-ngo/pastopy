2021-11-17 20:41:03:510 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) (? (BLOCK (ALT funcDeclaration))) (? (BLOCK (ALT procDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE funcDeclaration (BLOCK (ALT 'function' ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN COLON varType SEMI varDeclaration block SEMI))) (RULE procDeclaration (BLOCK (ALT 'procedure' ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN SEMI varDeclaration block SEMI))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType EQUAL expression SEMI) (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (BLOCK (ALT 'integer') (ALT 'string') (ALT 'real') (ALT 'boolean'))))) (RULE argumentList (BLOCK (ALT argGroup (* (BLOCK (ALT SEMI argGroup)))))) (RULE argGroup (BLOCK (ALT varName COLON varType))) (RULE funcCall (BLOCK (ALT ID LPAREN parameter RPAREN))) (RULE procCall (BLOCK (ALT ID LPAREN parameter RPAREN SEMI))) (RULE parameter (BLOCK (ALT EPSILON) (ALT expression (* (BLOCK (ALT SEMI expression)))))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT procCall))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varName RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID) (ALT element) (ALT funcCall)) (* (BLOCK (ALT operators expression)))))) (RULE element (BLOCK (ALT LPAREN expression RPAREN) (ALT ID) (ALT (BLOCK (ALT 'true') (ALT 'TRUE') (ALT 'false') (ALT 'FALSE'))) (ALT CONST_INT))) (RULE operators (BLOCK (ALT EQUAL) (ALT NOT_EQUAL) (ALT LT) (ALT LE) (ALT GE) (ALT GT) (ALT OR) (ALT AND) (ALT DIV) (ALT MOD) (ALT PLUS) (ALT MINUS) (ALT STAR) (ALT SLASH))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-17 20:41:03:527 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) (? (BLOCK (ALT funcDeclaration))) (? (BLOCK (ALT procDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE funcDeclaration (BLOCK (ALT 'function' ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN COLON varType SEMI varDeclaration block SEMI))) (RULE procDeclaration (BLOCK (ALT 'procedure' ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN SEMI varDeclaration block SEMI))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType EQUAL expression SEMI) (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'string' 'real' 'boolean')))) (RULE argumentList (BLOCK (ALT argGroup (* (BLOCK (ALT SEMI argGroup)))))) (RULE argGroup (BLOCK (ALT varName COLON varType))) (RULE funcCall (BLOCK (ALT ID LPAREN parameter RPAREN))) (RULE procCall (BLOCK (ALT ID LPAREN parameter RPAREN SEMI))) (RULE parameter (BLOCK (ALT EPSILON) (ALT expression (* (BLOCK (ALT SEMI expression)))))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT procCall))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varName RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID) (ALT element) (ALT funcCall)) (* (BLOCK (ALT operators expression)))))) (RULE element (BLOCK (ALT LPAREN expression RPAREN) (ALT ID) (ALT (SET 'true' 'TRUE' 'false' 'FALSE')) (ALT CONST_INT))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-17 20:41:03:543 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) (? (BLOCK (ALT funcDeclaration))) (? (BLOCK (ALT procDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE funcDeclaration (BLOCK (ALT 'function' ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN COLON varType SEMI varDeclaration block SEMI))) (RULE procDeclaration (BLOCK (ALT 'procedure' ID LPAREN (? (BLOCK (ALT argumentList))) RPAREN SEMI varDeclaration block SEMI))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType EQUAL expression SEMI) (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'string' 'real' 'boolean')))) (RULE argumentList (BLOCK (ALT argGroup (* (BLOCK (ALT SEMI argGroup)))))) (RULE argGroup (BLOCK (ALT varName COLON varType))) (RULE funcCall (BLOCK (ALT ID LPAREN parameter RPAREN))) (RULE procCall (BLOCK (ALT ID LPAREN parameter RPAREN SEMI))) (RULE parameter (BLOCK (ALT EPSILON) (ALT expression (* (BLOCK (ALT SEMI expression)))))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement) (ALT procCall))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varName RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID) (ALT element) (ALT funcCall)) (* (BLOCK (ALT operators expression)))))) (RULE element (BLOCK (ALT LPAREN expression RPAREN) (ALT ID) (ALT (SET 'true' 'TRUE' 'false' 'FALSE')) (ALT CONST_INT))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement)))))
2021-11-17 20:41:03:543 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR PascalLexer (RULES (RULE T__0 (BLOCK (ALT 'program'))) (RULE T__1 (BLOCK (ALT 'var'))) (RULE T__2 (BLOCK (ALT 'function'))) (RULE T__3 (BLOCK (ALT 'procedure'))) (RULE T__4 (BLOCK (ALT 'integer'))) (RULE T__5 (BLOCK (ALT 'string'))) (RULE T__6 (BLOCK (ALT 'real'))) (RULE T__7 (BLOCK (ALT 'boolean'))) (RULE T__8 (BLOCK (ALT 'begin'))) (RULE T__9 (BLOCK (ALT 'end'))) (RULE T__10 (BLOCK (ALT 'writeln'))) (RULE T__11 (BLOCK (ALT 'readln'))) (RULE T__12 (BLOCK (ALT 'true'))) (RULE T__13 (BLOCK (ALT 'TRUE'))) (RULE T__14 (BLOCK (ALT 'false'))) (RULE T__15 (BLOCK (ALT 'FALSE'))) (RULE T__16 (BLOCK (ALT 'if'))) (RULE T__17 (BLOCK (ALT 'then'))) (RULE T__18 (BLOCK (ALT 'else'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE STAR (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-17 20:41:03:715 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, SEMI=20, COLON=21, COMMA=22, DOT=23, LPAREN=24, RPAREN=25, ASSIGN=26, PLUS=27, MINUS=28, STAR=29, SLASH=30, DIV=31, MOD=32, EQUAL=33, NOT_EQUAL=34, LT=35, LE=36, GT=37, GE=38, OR=39, AND=40, ID=41, CONST_INT=42, CONST_STR=43, WS=44, COMMENT=45}
2021-11-17 20:41:03:715 semantics LogManager.java:25 strings={'program'=1, 'var'=2, 'function'=3, 'procedure'=4, 'integer'=5, 'string'=6, 'real'=7, 'boolean'=8, 'begin'=9, 'end'=10, 'writeln'=11, 'readln'=12, 'true'=13, 'TRUE'=14, 'false'=15, 'FALSE'=16, 'if'=17, 'then'=18, 'else'=19, ';'=20, ':'=21, ','=22, '.'=23, '('=24, ')'=25, ':='=26, '+'=27, '-'=28, '*'=29, '/'=30, '//'=31, '%'=32, '='=33, '<>'=34, '<'=35, '<='=36, '>'=37, '>='=38, 'or'=39, 'and'=40}
2021-11-17 20:41:03:722 LL1 LogManager.java:25 
DECISION 0 in rule program
2021-11-17 20:41:03:722 LL1 LogManager.java:25 look=[1, {2..4, 9}]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 1 in rule program
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[2, {3..4, 9}]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 2 in rule program
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[3, {4, 9}]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 3 in rule program
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[4, 9]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 4 in rule programName
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 5 in rule varDeclaration
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[20, 20]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 6 in rule funcDeclaration
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[41, 25]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 7 in rule procDeclaration
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[41, 25]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 8 in rule varDeclarationBlock
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[41, 41]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 9 in rule varName
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[22, {21, 25}]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 10 in rule argumentList
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[20, 25]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 11 in rule parameter
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[20, 25]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 12 in rule parameter
2021-11-17 20:41:03:723 LL1 LogManager.java:25 look=[25, {13..16, 24, 41..43}]
2021-11-17 20:41:03:723 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:723 LL1 LogManager.java:25 
DECISION 13 in rule block
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[20, 10]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 14 in rule statements
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[20, {10, 20}]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 15 in rule statement
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[11, 12, 11, 9, 41, 17, 41]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 16 in rule expressions
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[22, 25]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 17 in rule expression
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[24, 42, 43, 41, {13..16, 24, 41..42}, 41]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 18 in rule expression
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[{27..40}, {10, 18..20, 22, 25, 27..40}]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 19 in rule element
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[24, 41, {13..16}, 42]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? true
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 20 in rule ifStatement
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[9, {9, 11..12, 17, 41}]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 21 in rule ifStatement
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[19, {10, 19..20}]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
2021-11-17 20:41:03:724 LL1 LogManager.java:25 
DECISION 22 in rule elseStatement
2021-11-17 20:41:03:724 LL1 LogManager.java:25 look=[9, {9, 11..12, 17, 41}]
2021-11-17 20:41:03:724 LL1 LogManager.java:25 LL(1)? false
