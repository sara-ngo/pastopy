2021-11-17 16:33:31:410 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (BLOCK (ALT 'integer') (ALT 'string') (ALT 'real') (ALT 'boolean'))))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varName RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT EQUAL) (ALT NOT_EQUAL) (ALT LT) (ALT LE) (ALT GE) (ALT GT) (ALT OR) (ALT AND) (ALT DIV) (ALT MOD) (ALT PLUS) (ALT MINUS) (ALT STAR) (ALT SLASH))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-17 16:33:31:424 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'string' 'real' 'boolean')))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varName RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-17 16:33:31:439 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Pascal (RULES (RULE program (BLOCK (ALT (? (BLOCK (ALT programName))) (? (BLOCK (ALT varDeclaration))) block DOT))) (RULE programName (BLOCK (ALT 'program' (+ (BLOCK (ALT .))) SEMI))) (RULE varDeclaration (BLOCK (ALT 'var' varDeclarationBlock (* (BLOCK (ALT SEMI varDeclarationBlock))) SEMI))) (RULE varDeclarationBlock (BLOCK (ALT varName COLON varType))) (RULE varName (BLOCK (ALT ID (* (BLOCK (ALT COMMA ID)))))) (RULE varType (BLOCK (ALT (SET 'integer' 'string' 'real' 'boolean')))) (RULE block (BLOCK (ALT 'begin' statements (? (BLOCK (ALT SEMI))) 'end'))) (RULE statements (BLOCK (ALT statement (* (BLOCK (ALT SEMI statement)))))) (RULE statement (BLOCK (ALT writelnReadln) (ALT readln) (ALT writeln) (ALT block) (ALT assignmentStatement) (ALT ifStatement))) (RULE writelnReadln (BLOCK (ALT 'writeln' LPAREN CONST_STR RPAREN SEMI 'readln' LPAREN ID RPAREN))) (RULE readln (BLOCK (ALT 'readln' LPAREN varName RPAREN))) (RULE writeln (BLOCK (ALT 'writeln' LPAREN expressions RPAREN))) (RULE assignmentStatement (BLOCK (ALT ID ASSIGN expression))) (RULE expressions (BLOCK (ALT expression (* (BLOCK (ALT COMMA expression)))))) (RULE expression (BLOCK (ALT (BLOCK (ALT LPAREN expression RPAREN) (ALT CONST_INT) (ALT CONST_STR) (ALT ID)) (* (BLOCK (ALT operators expression)))))) (RULE operators (BLOCK (ALT (SET EQUAL NOT_EQUAL LT LE GE GT OR AND DIV MOD PLUS MINUS STAR SLASH)))) (RULE ifStatement (BLOCK (ALT 'if' expression 'then' (BLOCK (ALT block) (ALT blockBody)) (? (BLOCK (ALT elseStatement)))))) (RULE elseStatement (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT blockBody))))) (RULE blockBody (BLOCK (ALT statement)))))
2021-11-17 16:33:31:440 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR PascalLexer (RULES (RULE T__0 (BLOCK (ALT 'program'))) (RULE T__1 (BLOCK (ALT 'var'))) (RULE T__2 (BLOCK (ALT 'integer'))) (RULE T__3 (BLOCK (ALT 'string'))) (RULE T__4 (BLOCK (ALT 'real'))) (RULE T__5 (BLOCK (ALT 'boolean'))) (RULE T__6 (BLOCK (ALT 'begin'))) (RULE T__7 (BLOCK (ALT 'end'))) (RULE T__8 (BLOCK (ALT 'writeln'))) (RULE T__9 (BLOCK (ALT 'readln'))) (RULE T__10 (BLOCK (ALT 'if'))) (RULE T__11 (BLOCK (ALT 'then'))) (RULE T__12 (BLOCK (ALT 'else'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE ASSIGN (BLOCK (ALT ':='))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE SLASH (BLOCK (ALT '/'))) (RULE DIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE EQUAL (BLOCK (ALT '='))) (RULE NOT_EQUAL (BLOCK (ALT '<>'))) (RULE LT (BLOCK (ALT '<'))) (RULE LE (BLOCK (ALT '<='))) (RULE GT (BLOCK (ALT '>'))) (RULE GE (BLOCK (ALT '>='))) (RULE OR (BLOCK (ALT 'or'))) (RULE AND (BLOCK (ALT 'and'))) (RULE ID (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CONST_INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CONST_STR (BLOCK (ALT '\'' (* (BLOCK (ALT '\'\'') (ALT (~ (SET '\''))))) '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '(*' (* (BLOCK (ALT .))) '*)') skip)))))
2021-11-17 16:33:31:607 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, SEMI=14, COLON=15, COMMA=16, DOT=17, LPAREN=18, RPAREN=19, ASSIGN=20, PLUS=21, MINUS=22, MUL=23, SLASH=24, DIV=25, MOD=26, EQUAL=27, NOT_EQUAL=28, LT=29, LE=30, GT=31, GE=32, OR=33, AND=34, ID=35, CONST_INT=36, CONST_STR=37, WS=38, COMMENT=39, STAR=40}
2021-11-17 16:33:31:607 semantics LogManager.java:25 strings={'program'=1, 'var'=2, 'integer'=3, 'string'=4, 'real'=5, 'boolean'=6, 'begin'=7, 'end'=8, 'writeln'=9, 'readln'=10, 'if'=11, 'then'=12, 'else'=13, ';'=14, ':'=15, ','=16, '.'=17, '('=18, ')'=19, ':='=20, '+'=21, '-'=22, '*'=23, '/'=24, '//'=25, '%'=26, '='=27, '<>'=28, '<'=29, '<='=30, '>'=31, '>='=32, 'or'=33, 'and'=34}
2021-11-17 16:33:31:613 LL1 LogManager.java:25 
DECISION 0 in rule program
2021-11-17 16:33:31:613 LL1 LogManager.java:25 look=[1, {2, 7}]
2021-11-17 16:33:31:613 LL1 LogManager.java:25 LL(1)? true
2021-11-17 16:33:31:613 LL1 LogManager.java:25 
DECISION 1 in rule program
2021-11-17 16:33:31:613 LL1 LogManager.java:25 look=[2, 7]
2021-11-17 16:33:31:613 LL1 LogManager.java:25 LL(1)? true
2021-11-17 16:33:31:613 LL1 LogManager.java:25 
DECISION 2 in rule programName
2021-11-17 16:33:31:613 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:613 LL1 LogManager.java:25 
DECISION 3 in rule varDeclaration
2021-11-17 16:33:31:613 LL1 LogManager.java:25 look=[14, 14]
2021-11-17 16:33:31:613 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:613 LL1 LogManager.java:25 
DECISION 4 in rule varName
2021-11-17 16:33:31:613 LL1 LogManager.java:25 look=[16, {15, 19}]
2021-11-17 16:33:31:613 LL1 LogManager.java:25 LL(1)? true
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 5 in rule block
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[14, 8]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? true
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 6 in rule statements
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[14, {8, 14}]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 7 in rule statement
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[9, 10, 9, 7, 35, 11]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 8 in rule expressions
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[16, 19]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? true
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 9 in rule expression
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[18, 36, 37, 35]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? true
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 10 in rule expression
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[{21..22, 24..34, 40}, {8, 12..14, 16, 19, 21..22, 24..34, 40}]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 11 in rule ifStatement
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[7, {7, 9..11, 35}]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 12 in rule ifStatement
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[13, {8, 13..14}]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? false
2021-11-17 16:33:31:614 LL1 LogManager.java:25 
DECISION 13 in rule elseStatement
2021-11-17 16:33:31:614 LL1 LogManager.java:25 look=[7, {7, 9..11, 35}]
2021-11-17 16:33:31:614 LL1 LogManager.java:25 LL(1)? false
